{"version":3,"sources":["hooks/useFetch.tsx","hooks/useToUpperCaseFirstLetter.tsx","components/MUIBackdrop.tsx","components/PokemonCard.tsx","components/SearchInput.tsx","pages/PokemonPage.tsx"],"names":["useFetch","url","useState","data","setData","isLoading","setIsLoading","error","setError","useEffect","isMounted","a","Axios","get","response","fetchData","useToUpperCaseFirstLetter","string","length","charAt","toUpperCase","slice","useStyles","makeStyles","theme","backdrop","zIndex","MUIBackdrop","open","classes","className","color","imageStyles","height","objectFit","elementalTypesButton","margin","PokemonCard","push","useHistory","fetchedData","upperCaseFirstLetter","xs","sm","lg","item","variant","width","onClick","id","component","image","sprites","other","front_default","title","name","container","justify","gutterBottom","types","map","type","wrapperContainer","marginTop","padding","pageContainerStyles","textAlign","formWrapper","fieldTextStyle","breakpoints","up","SearchInput","formikSubmitHandler","console","log","Grid","alignItems","initialValues","onSubmit","values","setSubmitting","toLowerCase","trim","submitForm","isSubmitting","as","TextField","placeholder","label","IconButton","disabled","fontSize","LinearProgress","Typography","align","paragraph","buttonMargin","marginRight","down","justifyContent","PokemonPage","setUrl","nextPageHandler","next","previousPageHandler","previous","spacing","results","Button"],"mappings":"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","file":"static/js/7.83d3e199.chunk.js","sourcesContent":["import Axios from 'axios'\nimport { useState, useEffect } from 'react'\n\nconst useFetch = <T,>(url: string) => {\n  const [data, setData] = useState<T | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    let isMounted = true\n    setIsLoading(true)\n    const fetchData = async () => {\n      try {\n        const { data } = await Axios.get(url)\n        if (isMounted) {\n          setIsLoading(false)\n          setData(data)\n        }\n      } catch (err) {\n        setIsLoading(false)\n        setError(err.response.data)\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      isMounted = false\n    }\n  }, [url])\n\n  return { data, isLoading, error }\n}\n\nexport default useFetch\n","const useToUpperCaseFirstLetter = () => {\n  const upperCaseFirstLetter = (string: string): string => {\n    if (string !== null && string.length > 0) {\n      return `${string.charAt(0).toUpperCase()}${string.slice(1)}`\n    }\n    return ''\n  }\n\n  return upperCaseFirstLetter\n}\n\nexport default useToUpperCaseFirstLetter\n","import React from 'react'\nimport { Backdrop, CircularProgress, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: 999,\n  },\n}))\n\nconst MUIBackdrop: React.FC<{ open: boolean }> = ({ open }) => {\n  const classes = useStyles()\n\n  return (\n    <Backdrop className={classes.backdrop} open={open}>\n      <CircularProgress color='secondary' />\n    </Backdrop>\n  )\n}\n\nexport default MUIBackdrop\n","import React from 'react'\nimport {\n  Grid,\n  makeStyles,\n  Typography,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Button,\n} from '@material-ui/core'\n\nimport { useHistory } from 'react-router'\nimport useFetch from '../hooks/useFetch'\n\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport useToUpperCaseFirstLetter from '../hooks/useToUpperCaseFirstLetter'\n\nconst useStyles = makeStyles({\n  imageStyles: {\n    height: 200,\n    objectFit: 'contain',\n  },\n  elementalTypesButton: {\n    margin: '20px 0',\n  },\n})\n\ninterface FetchData {\n  name: string\n  sprites: {\n    other: {\n      'official-artwork': {\n        front_default: string\n      }\n    }\n  }\n  types: [\n    {\n      type: {\n        name: string\n      }\n    }\n  ]\n  id: number\n}\n\ninterface Props {\n  data: {\n    url: string\n  }\n}\n\nconst PokemonCard: React.FC<Props> = ({ data }) => {\n  const classes = useStyles()\n  const { push } = useHistory()\n\n  const { data: fetchedData, isLoading, error } = useFetch<FetchData>(data.url)\n\n  const upperCaseFirstLetter = useToUpperCaseFirstLetter()\n\n  if (error) {\n    return (\n      <Grid xs={12} sm={6} lg={3} item>\n        <Card>\n          <CardContent>\n            <Typography variant='h5'>Error during loading Pokemon, Try Again!</Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    )\n  }\n\n  return (\n    <Grid item xs={12} sm={6} lg={3}>\n      {isLoading ? (\n        <div>\n          <Skeleton variant='text' />\n          <Skeleton variant='circle' width={40} height={40} />\n          <Skeleton variant='rect' width={210} height={118} />\n        </div>\n      ) : (\n        fetchedData !== null && (\n          <Card>\n            <CardActionArea onClick={() => push(`/pokemon/${fetchedData.id}`)}>\n              <CardMedia\n                className={classes.imageStyles}\n                component='img'\n                image={fetchedData.sprites.other['official-artwork'].front_default}\n                title={upperCaseFirstLetter(fetchedData.name)}\n              />\n              <CardContent>\n                <Grid container justify='space-around'>\n                  <Typography gutterBottom variant='h5' component='h2'>\n                    {upperCaseFirstLetter(fetchedData.name)}\n                  </Typography>\n                  <Typography gutterBottom variant='h5' component='h2'>\n                    #{fetchedData.id}\n                  </Typography>\n                </Grid>\n              </CardContent>\n            </CardActionArea>\n\n            <Grid justify='space-around' container>\n              {fetchedData.types.map((item) => (\n                <Button\n                  className={classes.elementalTypesButton}\n                  variant='contained'\n                  color='secondary'\n                  key={item.type.name}\n                >\n                  {item.type.name}\n                </Button>\n              ))}\n            </Grid>\n          </Card>\n        )\n      )}\n    </Grid>\n  )\n}\n\nexport default PokemonCard\n","import React, { useState } from 'react'\n\nimport SearchIcon from '@material-ui/icons/Search'\nimport { Field, Form, Formik } from 'formik'\nimport {\n  Grid,\n  IconButton,\n  LinearProgress,\n  makeStyles,\n  TextField,\n  Typography,\n} from '@material-ui/core'\nimport Axios from 'axios'\nimport { useHistory } from 'react-router'\n\nconst useStyles = makeStyles((theme) => ({\n  wrapperContainer: {\n    marginTop: 20,\n    padding: 20,\n  },\n  pageContainerStyles: {\n    margin: '20px auto',\n    padding: '0 20px',\n    textAlign: 'center',\n  },\n  formWrapper: {\n    margin: '0 20px',\n  },\n  fieldTextStyle: {\n    width: 300,\n    [theme.breakpoints.up('sm')]: {\n      width: 400,\n    },\n  },\n}))\n\ninterface Values {\n  name: string\n}\n\nconst SearchInput: React.FC<{}> = () => {\n  const classes = useStyles()\n  const { push } = useHistory()\n\n  const [error, setError] = useState('')\n\n  const formikSubmitHandler = async (url: string) => {\n    try {\n      const { data } = await Axios.get(url)\n      console.log(data)\n      push(`/pokemon/${data.id}`)\n    } catch (error) {\n      setError(error.response.data)\n    }\n  }\n\n  const initialValues: Values = {\n    name: '',\n  }\n\n  return (\n    <Grid className={classes.formWrapper} alignItems='center' xs={12} container item>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={async (values, { setSubmitting }) => {\n          console.log(values)\n          await formikSubmitHandler(\n            `https://pokeapi.co/api/v2/pokemon/${values.name.toLowerCase().trim()}`\n          )\n          setSubmitting(false)\n        }}\n      >\n        {({ submitForm, isSubmitting, values }) => (\n          <Form>\n            <Field\n              as={TextField}\n              id='name'\n              name='name'\n              type='text'\n              placeholder='Pokemon Name'\n              variant='filled'\n              color='secondary'\n              label='Search for Pokemon'\n              className={classes.fieldTextStyle}\n            />\n            <IconButton\n              color='secondary'\n              onClick={submitForm}\n              disabled={values.name.length <= 0 || isSubmitting}\n            >\n              <SearchIcon fontSize='large' />\n            </IconButton>\n\n            {isSubmitting && <LinearProgress color='secondary' />}\n\n            {error && (\n              <Typography align='left' paragraph color='error'>\n                Could not find this Pokemon\n              </Typography>\n            )}\n          </Form>\n        )}\n      </Formik>\n    </Grid>\n  )\n}\n\nexport default SearchInput\n","import React, { useState } from 'react'\n\nimport useFetch from '../hooks/useFetch'\n\nimport PokemonCard from '../components/PokemonCard'\nimport { Button, Grid, IconButton, makeStyles, Typography } from '@material-ui/core'\nimport MUIBackdrop from '../components/MUIBackdrop'\nimport SearchInput from '../components/SearchInput'\n\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\n\nconst useStyles = makeStyles((theme) => ({\n  wrapperContainer: {\n    marginTop: 20,\n    padding: 20,\n  },\n  pageContainerStyles: {\n    margin: '20px auto',\n    padding: '0 20px',\n    textAlign: 'center',\n  },\n  buttonMargin: {\n    marginRight: 20,\n    [theme.breakpoints.down('sm')]: {\n      marginTop: 20,\n      justifyContent: 'flex-start',\n    },\n  },\n}))\n\ninterface FetchData {\n  results: Array<{\n    name: string\n    url: string\n  }>\n\n  next: string\n  previous: string\n}\n\nconst PokemonPage: React.FC<{}> = () => {\n  const classes = useStyles()\n\n  const [url, setUrl] = useState(`https://pokeapi.co/api/v2/pokemon/?limit=12&offset=0`)\n\n  const { data, isLoading, error } = useFetch<FetchData>(url)\n\n  const nextPageHandler = () => {\n    if (data !== null) {\n      setUrl(data.next)\n    }\n  }\n\n  const previousPageHandler = () => {\n    if (data !== null) {\n      setUrl(data.previous)\n    }\n  }\n\n  return (\n    <Grid className={classes.pageContainerStyles} container>\n      {isLoading && <MUIBackdrop open={isLoading} />}\n      {error && (\n        <Grid justify='center' container>\n          <Typography variant='h3'>Error during loading Pokemon</Typography>\n        </Grid>\n      )}\n\n      <Grid container justify='space-between'>\n        <SearchInput />\n\n        {data !== null && (\n          <Grid className={classes.buttonMargin} container item xs={12} justify='flex-end'>\n            <IconButton\n              color='secondary'\n              disabled={data.previous === null}\n              onClick={previousPageHandler}\n            >\n              <ChevronLeftIcon />\n            </IconButton>\n            <IconButton color='secondary' disabled={data.next === null} onClick={nextPageHandler}>\n              <ChevronRightIcon />\n            </IconButton>\n          </Grid>\n        )}\n      </Grid>\n\n      <Grid className={classes.wrapperContainer} container spacing={1} justify='center'>\n        {!isLoading &&\n          data !== null &&\n          data.results.map((item) => <PokemonCard data={item} key={item.name} />)}\n      </Grid>\n\n      {data !== null && (\n        <Grid container justify='space-around'>\n          <Button\n            variant='outlined'\n            color='secondary'\n            disabled={data.previous === null}\n            onClick={previousPageHandler}\n          >\n            Previous Page\n          </Button>\n          <Button\n            variant='outlined'\n            color='secondary'\n            disabled={data.next === null}\n            onClick={nextPageHandler}\n          >\n            Next Page\n          </Button>\n        </Grid>\n      )}\n    </Grid>\n  )\n}\n\nexport default PokemonPage\n"],"sourceRoot":""}